#!/usr/bin/env python3
"""Script para verificar se o ambiente est√° configurado corretamente."""

import sys
from pathlib import Path


def check_python_version():
    """Verifica vers√£o do Python."""
    print("üêç Verificando Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} (requer 3.8+)")
        return False


def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas."""
    print("\nüì¶ Verificando depend√™ncias...")
    
    dependencies = {
        "dlt": "dlt",
        "psycopg2": "psycopg2",
    }
    
    all_ok = True
    for name, import_name in dependencies.items():
        try:
            __import__(import_name)
            print(f"   ‚úÖ {name}")
        except ImportError:
            print(f"   ‚ùå {name} n√£o instalado")
            all_ok = False
    
    return all_ok


def check_secrets_file():
    """Verifica se o arquivo secrets.toml existe."""
    print("\nüîê Verificando credenciais...")
    
    secrets_path = Path(".dlt/secrets.toml")
    if secrets_path.exists():
        print(f"   ‚úÖ Arquivo .dlt/secrets.toml encontrado")
        return True
    else:
        print(f"   ‚ùå Arquivo .dlt/secrets.toml N√ÉO encontrado")
        print(f"      Crie o arquivo com base em .dlt/secrets.toml.example")
        return False


def check_postgres_connection():
    """Tenta conectar ao PostgreSQL."""
    print("\nüóÑÔ∏è  Verificando conex√£o PostgreSQL...")
    
    try:
        import dlt
        from salesforce.client import PostgresCredentials, make_postgres_client
        
        # Tenta obter credenciais
        try:
            client = make_postgres_client()
            print("   ‚úÖ Conex√£o com PostgreSQL estabelecida")
            
            # Testa uma query simples
            cursor = client.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            print(f"   ‚ÑπÔ∏è  PostgreSQL: {version.split(',')[0]}")
            cursor.close()
            client.close()
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Erro ao conectar: {e}")
            return False
            
    except ImportError as e:
        print(f"   ‚ö†Ô∏è  N√£o foi poss√≠vel importar m√≥dulos: {e}")
        return False


def check_table_exists():
    """Verifica se a tabela User existe."""
    print("\nüìä Verificando tabela 'User'...")
    
    try:
        from salesforce.client import make_postgres_client
        
        client = make_postgres_client()
        cursor = client.cursor()
        
        # Verifica se a tabela existe
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'User'
            );
        """)
        
        exists = cursor.fetchone()[0]
        
        if exists:
            # Conta registros
            cursor.execute("SELECT COUNT(*) FROM \"User\";")
            count = cursor.fetchone()[0]
            print(f"   ‚úÖ Tabela 'User' encontrada ({count} registros)")
        else:
            print(f"   ‚ö†Ô∏è  Tabela 'User' n√£o encontrada")
            print(f"      Altere o nome da tabela em salesforce/sources.py")
        
        cursor.close()
        client.close()
        
        return exists
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao verificar tabela: {e}")
        return False


def main():
    """Executa todas as verifica√ß√µes."""
    print("=" * 60)
    print("üîç VERIFICA√á√ÉO DO AMBIENTE - dlthub PostgreSQL ETL")
    print("=" * 60)
    
    checks = [
        check_python_version(),
        check_dependencies(),
        check_secrets_file(),
        check_postgres_connection(),
        check_table_exists(),
    ]
    
    print("\n" + "=" * 60)
    
    if all(checks[:4]):  # Primeiras 4 verifica√ß√µes s√£o cr√≠ticas
        print("‚úÖ AMBIENTE CONFIGURADO CORRETAMENTE!")
        print("\nüöÄ Execute: python salesforce_pipeline.py")
    else:
        print("‚ùå AMBIENTE COM PROBLEMAS")
        print("\nüìñ Consulte COMO_RODAR.md para instru√ß√µes")
    
    print("=" * 60)


if __name__ == "__main__":
    main()
